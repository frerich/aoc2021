defmodule Day18Test do
  use ExUnit.Case
  doctest Day18

  test "add/2" do
    assert Day18.add([[[[4, 3], 4], 4], [7, [[8, 4], 9]]], [1, 1]) == [
             [[[0, 7], 4], [[7, 8], [6, 0]]],
             [8, 1]
           ]

    assert Day18.add([[[0, [4, 5]], [0, 0]], [[[4, 5], [2, 6]], [9, 5]]], [
             7,
             [[[3, 7], [4, 3]], [[6, 3], [8, 8]]]
           ]) == [[[[4, 0], [5, 4]], [[7, 7], [6, 0]]], [[8, [7, 7]], [[7, 9], [5, 0]]]]

    assert Day18.add([[[[4, 0], [5, 4]], [[7, 7], [6, 0]]], [[8, [7, 7]], [[7, 9], [5, 0]]]], [
             [2, [[0, 8], [3, 4]]],
             [[[6, 7], 1], [7, [1, 6]]]
           ]) == [[[[6, 7], [6, 7]], [[7, 7], [0, 7]]], [[[8, 7], [7, 7]], [[8, 8], [8, 0]]]]
  end

  test "sum/1" do
    assert Day18.sum([[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]]) == [
             [[[3, 0], [5, 3]], [4, 4]],
             [5, 5]
           ]

    assert Day18.sum([[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6]]) == [
             [[[5, 0], [7, 4]], [5, 5]],
             [6, 6]
           ]
  end

  test "explode/1" do
    assert Day18.explode([[6, [5, [4, [3, 2]]]], 1]) == [[6, [5, [7, 0]]], 3]

    assert Day18.explode([[3, [2, [1, [7, 3]]]], [6, [5, [4, [3, 2]]]]]) == [
             [3, [2, [8, 0]]],
             [9, [5, [4, [3, 2]]]]
           ]

    assert Day18.explode([[3, [2, [8, 0]]], [9, [5, [4, [3, 2]]]]]) == [
             [3, [2, [8, 0]]],
             [9, [5, [7, 0]]]
           ]

    assert Day18.explode([1, [2, [3, [4, [5, 6]]]]]) == [1, [2, [3, [9, 0]]]]

    assert Day18.explode([1, [2, [3, [[4, 5], 6]]]]) == [1, [2, [7, [0, 11]]]]

    assert Day18.explode([1, [2, [[3, [4, 5]], 6]]]) == [1, [2, [[7, 0], 11]]]

    assert Day18.explode([1, [2, [[[3, 4], 5], 6]]]) == [1, [5, [[0, 9], 6]]]

    assert Day18.explode([1, [[2, [3, [4, 5]]], 6]]) == [1, [[2, [7, 0]], 11]]

    assert Day18.explode([1, [[2, [[3, 4], 5]], 6]]) == [1, [[5, [0, 9]], 6]]

    assert Day18.explode([1, [[[2, [3, 4]], 5], 6]]) == [1, [[[5, 0], 9], 6]]

    assert Day18.explode([1, [[[[2, 3], 4], 5], 6]]) == [3, [[[0, 7], 5], 6]]

    assert Day18.explode([[1, [2, [3, [4, 5]]]], 6]) == [[1, [2, [7, 0]]], 11]

    assert Day18.explode([[1, [2, [[3, 4], 5]]], 6]) == [[1, [5, [0, 9]]], 6]

    assert Day18.explode([[1, [[2, [3, 4]], 5]], 6]) == [[1, [[5, 0], 9]], 6]

    assert Day18.explode([[1, [[[2, 3], 4], 5]], 6]) == [[3, [[0, 7], 5]], 6]

    assert Day18.explode([[[1, [2, [3, 4]]], 5], 6]) == [[[1, [5, 0]], 9], 6]

    assert Day18.explode([[[1, [[2, 3], 4]], 5], 6]) == [[[3, [0, 7]], 5], 6]

    assert Day18.explode([[[[1, [2, 3]], 4], 5], 6]) == [[[[3, 0], 7], 5], 6]

    assert Day18.explode([[[[[1, 2], 3], 4], 5], 6]) == [[[[0, 5], 4], 5], 6]
  end

  test "split/1" do
    assert Day18.split([[9,[6,23]],17]) == [[9,[6,[11,12]]],17]
  end

  test "magnitude/1" do
      assert Day18.magnitude([[[[0,7],4],[[7,8],[6,0]]],[8,1]]) == 1384

      assert Day18.magnitude([[[[1,1],[2,2]],[3,3]],[4,4]]) == 445

      assert Day18.magnitude([[[[3,0],[5,3]],[4,4]],[5,5]]) == 791

      assert Day18.magnitude([[[[5,0],[7,4]],[5,5]],[6,6]]) == 1137

      assert Day18.magnitude([[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]) == 3488
  end
end
