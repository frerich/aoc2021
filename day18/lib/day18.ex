defmodule Day18 do
  @doc ~S"""
  Solves part one of the puzzle by adding up all given snailfish numbers and
  returning the magnitude of the sum.

  ## Examples

      iex> Day18.part_one(Day18.example)
      4140

      iex> Day18.part_one(Day18.input)
      3725
  """
  def part_one(input) do
    input |> sum() |> magnitude()
  end

  @doc ~S"""
  Solves part two of the puzzle by finding the largest magnitude of any sum of
  two snailfish numbers in the input.

  ## Examples

      iex> Day18.part_two(Day18.example)
      3993

      iex> Day18.part_two(Day18.input)
      4832
  """
  def part_two(input) do
    for [a | rest] <- tails(input), b <- rest, sum <- [add(a, b), add(b, a)] do
      magnitude(sum)
    end
    |> Enum.max()
  end

  @doc ~S"""
  Adds all values in the given list.

  ## Examples

      iex> Day18.sum([[1,1],[2,2],[3,3],[4,4]])
      [[[[1,1],[2,2]],[3,3]],[4,4]]
  """
  def sum([first | rest]) do
    Enum.reduce(rest, first, fn a, sum -> add(sum, a) end)
  end

  @doc ~S"""
  Returns the reduced sum of the given two snailfish numbers.

  ## Examples

      iex> Day18.add([1,2], [[3,4],5])
      [[1,2],[[3,4],5]]
  """
  def add(a, b), do: reduce([a, b])

  @doc ~S"""
  Explodes the leftmost pair in a snailfish number, if any.

  ## Examples

      iex> Day18.explode([[[[[9,8],1],2],3],4])
      [[[[0,9],2],3],4]

      iex> Day18.explode([7,[6,[5,[4,[3,2]]]]])
      [7,[6,[5,[7,0]]]]
  """
  def explode([[[[[_, b], c], d], e], f]), do: [[[[0, add_left(b, c)], d], e], f]
  def explode([[[[a, [b, c]], d], e], f]), do: [[[[add_right(a, b), 0], add_left(c, d)], e], f]
  def explode([[[a, [[b, c], d]], e], f]), do: [[[add_right(b, a), [0, add_left(c, d)]], e], f]
  def explode([[[a, [b, [c, d]]], e], f]), do: [[[a, [add_right(c, b), 0]], add_left(d, e)], f]
  def explode([[a, [[[b, c], d], e]], f]), do: [[add_right(b, a), [[0, add_left(c, d)], e]], f]
  def explode([[a, [[b, [c, d]], e]], f]), do: [[a, [[add_right(c, b), 0], add_left(d, e)]], f]
  def explode([[a, [b, [[c, d], e]]], f]), do: [[a, [add_right(c, b), [0, add_left(d, e)]]], f]
  def explode([[a, [b, [c, [d, e]]]], f]), do: [[a, [b, [add_right(d, c), 0]]], add_left(e, f)]
  def explode([a, [[[[b, c], d], e], f]]), do: [add_right(b, a), [[[0, add_left(c, d)], e], f]]
  def explode([a, [[[b, [c, d]], e], f]]), do: [a, [[[add_right(c, b), 0], add_left(d, e)], f]]
  def explode([a, [[b, [[c, d], e]], f]]), do: [a, [[add_right(c, b), [0, add_left(d, e)]], f]]
  def explode([a, [[b, [c, [d, e]]], f]]), do: [a, [[b, [add_right(d, c), 0]], add_left(e, f)]]
  def explode([a, [b, [[[c, d], e], f]]]), do: [a, [add_right(c, b), [[0, add_left(d, e)], f]]]
  def explode([a, [b, [[c, [d, e]], f]]]), do: [a, [b, [[add_right(d, c), 0], add_left(e, f)]]]
  def explode([a, [b, [c, [[d, e], f]]]]), do: [a, [b, [add_right(d, c), [0, add_left(e, f)]]]]
  def explode([a, [b, [c, [d, [e, _]]]]]), do: [a, [b, [c, [add_right(e, d), 0]]]]

  def explode(a), do: a

  @doc ~S"""
  Adds a number `n` to the rightmost literal number in the snailfish number.

  ## Examples

      iex> Day18.add_right(3, [[[1,2],3],4])
      [[[1,2],3],7]

      iex> Day18.add_right(4, [[1,[2,[3,[4,5]]]],8])
      [[1,[2,[3,[4,5]]]],12]
  """
  def add_right(n, [a, b]), do: [a, add_right(n, b)]
  def add_right(n, a), do: a + n

  @doc ~S"""
  Adds a number `n` to the leftmost literal number in the snailfish number.

  ## Examples

      iex> Day18.add_left(3, [[[1,2],3],4])
      [[[4,2],3],4]

      iex> Day18.add_left(4, [[1,[2,[3,[4,5]]]],8])
      [[5,[2,[3,[4,5]]]],8]
  """
  def add_left(n, [a, b]), do: [add_left(n, a), b]
  def add_left(n, a), do: a + n

  def reduce(a) do
    with ^a <- explode(a),
         ^a <- split(a) do
      a
    else
      b -> reduce(b)
    end
  end

  @doc ~S"""
  Splits the leftmost regular number which is greater than or equal to 10.

  ## Examples

      iex> Day18.split(10)
      [5,5]

      iex> Day18.split(11)
      [5,6]

      iex> Day18.split(12)
      [6,6]

      iex> Day18.split([[9,14],3])
      [[9,[7,7]],3]
  """
  def split([a, b]) do
    case split(a) do
      ^a -> [a, split(b)]
      x -> [x, b]
    end
  end

  def split(a) when a >= 10, do: [div(a, 2), div(a + 1, 2)]
  def split(a), do: a

  @doc ~S"""
  Computes the magnitude of a snailfish number.

  ## Examples

      iex> Day18.magnitude([9,1])
      29

      iex> Day18.magnitude([1,9])
      21

      iex> Day18.magnitude([[1,2],[[3,4],5]])
      143
  """
  def magnitude([a, b]), do: magnitude(a) * 3 + magnitude(b) * 2
  def magnitude(a), do: a

  @doc ~S"""
  Returns the given list followed by all non-empty tails of the list.

  ## Examples

      iex> Day18.tails([1,2,3,4,5])
      [[1,2,3,4,5],[2,3,4,5],[3,4,5],[4,5],[5]]
  """
  def tails([_ | tail] = list), do: [list | tails(tail)]
  def tails([]), do: []

  def example() do
    [
      [[[0, [5, 8]], [[1, 7], [9, 6]]], [[4, [1, 2]], [[1, 4], 2]]],
      [[[5, [2, 8]], 4], [5, [[9, 9], 0]]],
      [6, [[[6, 2], [5, 6]], [[7, 6], [4, 7]]]],
      [[[6, [0, 7]], [0, 9]], [4, [9, [9, 0]]]],
      [[[7, [6, 4]], [3, [1, 3]]], [[[5, 5], 1], 9]],
      [[6, [[7, 3], [3, 2]]], [[[3, 8], [5, 7]], 4]],
      [[[[5, 4], [7, 7]], 8], [[8, 3], 8]],
      [[9, 3], [[9, 9], [6, [4, 9]]]],
      [[2, [[7, 7], 7]], [[5, 8], [[9, 3], [0, 2]]]],
      [[[[5, 2], 5], [8, [3, 7]]], [[5, [7, 5]], [4, 4]]]
    ]
  end

  def input() do
    [
      [[8, 8], 5],
      [[[[9, 0], 1], 4], [[3, 6], [0, 5]]],
      [[9, [0, [4, 5]]], [1, [[6, 8], 4]]],
      [[8, 7], [[[8, 5], [2, 0]], [[6, 3], [5, 0]]]],
      [[[1, 8], 2], [[[9, 1], [2, 0]], [1, [9, 4]]]],
      [[[6, [8, 8]], [6, 4]], [[8, 2], [[0, 8], 9]]],
      [[[6, 3], [9, [9, 1]]], [[0, 0], 1]],
      [[[[2, 7], [8, 2]], [[9, 6], [5, 1]]], [[[7, 6], [6, 0]], [4, 2]]],
      [[[8, [9, 1]], [9, 3]], [[[5, 4], [8, 0]], [[3, 5], [9, 5]]]],
      [[[3, [4, 9]], 2], [[7, 9], 7]],
      [[[7, [9, 0]], 5], [[[3, 4], [2, 6]], [[3, 5], [7, 2]]]],
      [[8, [8, 9]], [[[3, 2], [6, 2]], 4]],
      [[[[8, 0], 3], [3, 8]], [[[5, 0], [7, 3]], [5, [3, 0]]]],
      [4, [[3, [0, 9]], [[5, 0], [2, 0]]]],
      [[[[0, 1], 5], [3, [9, 6]]], [[[4, 4], 5], [[3, 8], [5, 1]]]],
      [[[[4, 8], 8], 0], [5, [[1, 7], [4, 3]]]],
      [[3, [[1, 1], [5, 6]]], [7, [[4, 0], [0, 7]]]],
      [9, [4, [[1, 3], 2]]],
      [[[1, [2, 7]], [[4, 7], 3]], [2, 1]],
      [[[9, 5], [2, 5]], [[[8, 9], [4, 5]], 2]],
      [[2, [[7, 4], 6]], [[1, [0, 7]], [[4, 8], 8]]],
      [[[[0, 5], 3], [7, 0]], 9],
      [[[[1, 4], [4, 3]], 7], [[9, 4], [6, [8, 6]]]],
      [[[7, 2], [[3, 3], 1]], [5, 9]],
      [[[9, [6, 2]], 2], [[6, 5], 6]],
      [[5, [3, 2]], [[[2, 4], [1, 5]], [6, 3]]],
      [6, 3],
      [[9, 6], [[[8, 2], [5, 6]], [[3, 5], [3, 3]]]],
      [[[[2, 5], 7], 4], [8, 3]],
      [[[[6, 1], 9], [0, 6]], [6, 2]],
      [[[[8, 4], 2], [[0, 1], [5, 8]]], 9],
      [[[7, 0], [4, 9]], [[[9, 9], [4, 4]], [6, 6]]],
      [[[9, 8], [2, 0]], [[9, [6, 2]], [6, [5, 6]]]],
      [[[9, 8], [[0, 6], [3, 5]]], [[[4, 7], [7, 5]], [7, [8, 5]]]],
      [[[[9, 0], [1, 6]], [2, [5, 3]]], [[[2, 0], [0, 3]], [[9, 1], [7, 7]]]],
      [[[5, [2, 2]], [2, [1, 0]]], [1, 1]],
      [[[9, [7, 2]], [[2, 7], 1]], [[5, 7], [[8, 7], 7]]],
      [[[9, [9, 4]], [[0, 8], 2]], [0, [[2, 2], [4, 1]]]],
      [[[5, 5], [9, [2, 0]]], [[[9, 0], 6], 1]],
      [[[1, 9], [[9, 5], [5, 6]]], [6, [5, [9, 4]]]],
      [[[[8, 6], 9], 9], [[7, 2], [7, [2, 6]]]],
      [[[[6, 4], 7], 7], [[2, [9, 7]], 7]],
      [[7, [[5, 6], 9]], [[[9, 8], 8], [[8, 9], [1, 0]]]],
      [[[0, [7, 6]], 0], [[[2, 5], 1], 9]],
      [[[3, [4, 1]], [4, 2]], [0, [[6, 0], [1, 6]]]],
      [[9, [0, 0]], [[[3, 0], [9, 9]], [1, [1, 5]]]],
      [[[[9, 9], 1], 6], [5, 6]],
      [3, 4],
      [[[[5, 4], 9], 6], 2],
      [[5, 4], [[6, [7, 4]], [[0, 3], 0]]],
      [[[3, [9, 6]], 4], [[[9, 8], 6], 3]],
      [[5, [1, [5, 5]]], [[[3, 8], [0, 1]], [[9, 3], [6, 2]]]],
      [[4, [0, 3]], 1],
      [[[7, [2, 9]], [[5, 8], 2]], [[[4, 4], [2, 0]], 8]],
      [[[[4, 0], 0], 8], 7],
      [[[[3, 0], 0], [[6, 0], 3]], [[[1, 5], 1], [3, [0, 0]]]],
      [[[[8, 1], 5], 0], [[[3, 9], [8, 3]], [[6, 9], [5, 1]]]],
      [[7, 7], [[[8, 5], 2], [9, 2]]],
      [[[[4, 9], 9], [6, [5, 3]]], [[[7, 1], [7, 1]], [[9, 5], [7, 0]]]],
      [[7, [0, 5]], [7, [2, [1, 6]]]],
      [[9, [0, [0, 2]]], [[1, 1], [[6, 6], [5, 3]]]],
      [[[2, 9], [[6, 9], 9]], [[[4, 2], 7], [1, [2, 3]]]],
      [[[0, 1], [3, 3]], [3, [[2, 7], 2]]],
      [[[5, 6], 8], [[[4, 9], [3, 3]], [6, [5, 2]]]],
      [[4, [4, [2, 5]]], [[2, [4, 8]], [3, [7, 7]]]],
      [[2, 5], [[[9, 6], [9, 3]], [[4, 5], [2, 3]]]],
      [[5, [0, 5]], [[[2, 1], [0, 5]], 3]],
      [[[[2, 0], 5], [[7, 9], [4, 5]]], [0, [[1, 4], 9]]],
      [[[[1, 3], 2], [[3, 9], [9, 5]]], [[[4, 1], [3, 8]], 0]],
      [[[[1, 8], [8, 3]], [3, 0]], [[5, 1], [4, 8]]],
      [[1, 6], [3, 2]],
      [[4, 5], [[[9, 3], [8, 6]], [2, [8, 6]]]],
      [[[[4, 4], 1], [[7, 3], 2]], [[9, [2, 1]], [8, 2]]],
      [0, [[2, [3, 8]], 9]],
      [[1, [5, 0]], [0, [[2, 6], [8, 5]]]],
      [[6, [6, 1]], [[2, [7, 9]], [[8, 3], 1]]],
      [[[2, [5, 9]], [[8, 9], 1]], [[[5, 2], 2], 4]],
      [[[4, 3], 5], [[6, [3, 6]], 5]],
      [1, [6, [6, 2]]],
      [[[[4, 9], 3], 9], [[3, 9], [8, [4, 9]]]],
      [[[[7, 1], [1, 6]], [[7, 8], [3, 7]]], [[[5, 3], 7], [9, [3, 1]]]],
      [[[[0, 8], [8, 9]], 2], 7],
      [[[[3, 7], [9, 8]], [[7, 1], 8]], [[4, [4, 6]], 8]],
      [3, [3, [[4, 4], 5]]],
      [[3, [[2, 3], 7]], [[7, 9], 2]],
      [[[[0, 6], [5, 1]], [[7, 2], 5]], [9, 8]],
      [[4, 0], [[4, 3], [7, 2]]],
      [[[8, [1, 1]], [7, [9, 1]]], [9, [9, [0, 8]]]],
      [9, [[[4, 5], 8], [[3, 4], 9]]],
      [[[6, [4, 7]], [8, 7]], [[[3, 8], 5], [[2, 1], [3, 5]]]],
      [[[[5, 5], [6, 8]], [[2, 3], 6]], [8, [5, 7]]],
      [[5, [[6, 1], [3, 6]]], [[[0, 6], [7, 1]], [9, [8, 4]]]],
      [[[[0, 1], [4, 9]], [[1, 7], [3, 3]]], [6, [3, [6, 1]]]],
      [[[[3, 8], 5], [[4, 7], 2]], 2],
      [[6, [[4, 4], 0]], [[2, [4, 5]], [8, 2]]],
      [[6, [9, [7, 0]]], [[9, [1, 6]], [[6, 1], 1]]],
      [[[[2, 1], [5, 7]], [5, [9, 3]]], [[[7, 9], [4, 2]], 4]],
      [[3, 1], [[7, 8], [[8, 8], 9]]],
      [[[[9, 4], [1, 8]], [9, [3, 7]]], [[6, 9], [[7, 2], 1]]],
      [[[9, 3], 2], 9]
    ]
  end
end
